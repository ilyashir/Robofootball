Переменные пересылки:
"MESSAGE_SIZE" - размер сообщения для модуля. (Умолч. 100) (Должно быть больше NxtMessBuf как минимум на 4)*
"MAX_DEVICE" - максимальное количество доступных роботов. (Умолч. 10)
"NXT_PROGRAMM_NAME" - Исполняемая программа на NXT. (умолч. "BTtext.rxe")
"PIPE_ADDR" - адрес пайп канала. (умолч. "\\\\.\\Pipe\\BtModul"). 
	Соответственно имя пайпа для внешних программ выглядит как "BtModul"

"NxtMessBuf" - Размер полезного содержания в пересылаемом на NXT сообщении. 
	Соответственно (NxtMessBuf+2)-размер пакета, отправляемого на NXT.  (Умолч. 32; Используется в программе на NXT)


----------------------------------------------------------------------------------BTModule.exe
Правила пересылки:
Сообщение состоит строго из "MESSAGE_SIZE" байтов, первые 2 из которых контрольные. 
	Начиная с 3его всё пересылается как активное содержимое на NXT.	
	(Пересылается сообщение длиной MESSAGE_SIZE, но первые 2 байта остаются контрольными.
	Модулем первый байт заменяется на 32 а второй на 0(Таков формат сообщения для NXT).


1 байт - контрольный для BT модуля. 
	0 - не разбирать. 
	1 - Пересылать с разбором адресатов по 2 ему байту. 
	2 - посылка исключиьтельно для BT модуля(не пересылать). -Например: "21"-очистить очередь пересылки.	
2 байт -контрольный номер робота адресата.
	0 - переслать на все доступные.
	(n>0) && (n<=MAX_ROBOT) переслать на его номер.
----------------------------------------------------------------------------BTdrive.rxe
//Правила разбора байтов для BTdrive.rxe
1 байт - мощьность на левое колёсо.
2 байт - мощьность на правое колёсо.
3 байт - (1,-1) Пинок в прямом и обратном направлении.
4 байт - (1) гудок.
----------------------------------------------------------------------------BTtext.rxe
//Правила разбора байтов для BTtext.rxe
При приёме пакета издаётся низкий и короткий гудок.
Если первый байт не равен нулю(концу строки) или 48(цифровому нулю), то сообщение выводится на экран
иначе сообщение разбирается дальше:
	по второму байту:
	48('0') - вывести сообщение "MONITOR!!!"
	49('1') - высокий протяжный гудок.
	50('2') - вращать колёса вперёд 
	51('3') - вращать назад -//-
		Для колёс(2,3) используются правила: 
			3ий байт :'0','1','2' - использовать мотор соответственно A,B,С.
			4ый байт : цифра от '0' до '9'. мощьность расчитывается как: (<4ый байт>-48)*10.
	52('4') - ответить на модуль сообщением "LOGIN"


------------------------------------------------------------------------------BTtext.rxe
Пример внешних програм:
1) Код программы клиента на С (Используюя Pipe_Client.h):
	
	Pipe_Client myClient("BtModul"); //Создаёт подключение к модулю.
	char ch[100]="  01";
	ch[0]=1;  // Прошу переслать сообщение
	ch[1]=0;  // на все NXT 
	myClient.Send(ch,100);//отослать сообщение длиной в 100 байт.

Все NXT принимают сообщение "01" и издают высокий гудок.

2)Сообщение отправленное из Qt при помощи (Socket_Client.h)
Socket_Client BtModul("BtModul");
   	BtModul.Connect();
    	char ch[100]="  01";
        	ch[0]=1;
        	ch[1]=0;
	BtModul.Send(ch,100);

3) Код программы клиента на C (Используюя Pipe_Client.h):

	Pipe_Client myClient("BtModul"); //Создаёт подключение к модулю.
	char ch[100]="  0215";
		ch[0]=1; // Прошу переслать сообщение на конкретное NXT
		ch[1]=1; // Переслать на устройство номер 1
	myClient.Send(ch,100); //отослать сообщение длиной в 100 байт.

NXT принимает сообщение "0215"
	-Мотору ехать вперёд.
	-Мотор B.
	-Мощьность 50.

4)Сообщение отправленное из BTmodul: 
	Текст сообщения: "0210"
	-Останавливает мотор у выбранного устройства.
